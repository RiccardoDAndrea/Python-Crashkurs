#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("~/Desktop/")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/car.txt",sep=""))
#create an output folder
output_folder<-"output_mlr_Basic"
if (file.exists(paste(getwd(),"/",output_folder,sep=""))=="FALSE") {
dir.create(paste(getwd(),"/",output_folder,"/",sep=""))
}
#---------------------------------------------------------------
# Read and view the data
#---------------------------------------------------------------
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
head(mydata)
#---------------------------------------------------------------
# Multiple Linear Regression:
#fit <- lm(y ~ x1 + x2 + x3, data=mydata)
#---------------------------------------------------------------
fit1 <- lm(MPG ~ WGT +CYL + ENG ,data=mydata)
summary(fit1) # show results
# Key outputs and statistics
coefficients(fit) # model coefficients
confint(fit, level=0.99) # 99% confidence for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
#---------------------------------------------------------------
# OUTPUT
#---------------------------------------------------------------
# use "capture.output" to save all the output from the "summary":
capture.output(summary(fit), file=(paste(output_folder,"/Modell3.txt", sep="")))
#use "write.table" to save the output tables:
write.table(anova(fit), file=(paste(output_folder,"/AnovaLinRegModelOutput.txt", sep="")))
#plots
# windows device figure (it will just be shortly shown and then closed and saved)
quartz()# for Mac: quartz()
par(mfrow=c(2,2))
plot(fit)
savePlot(filename=paste(output_folder,"/LinReg", ".jpg", sep=""),type="jpg")  #for Mac: quartz.save(file=paste(output_folder,"/LinReg".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz.save(file=paste(output_folder,"/LinReg", ".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
#---------------------------------------------------------------
# MULTIPLE LINEAR REGRESSION
#---------------------------------------------------------------
# Main features:
#  Model fitting
#  Key statistics (model fit, anova etc.)
# Dataset used = "car.txt":
# - MPG: miles per gallon
# - CYL: number of cylinders
# - ENG: engine displacement in cubic inches
# - WGT: vehicle weight in pounds
#---------------------------------------------------------------
if (sum(installed.packages()[,1]=="lmtest")==0){
install.packages("lmtest")
}
library(lmtest)
#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("~/Desktop/")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/car.txt",sep=""))
#create an output folder
output_folder<-"output_mlr_Basic"
if (file.exists(paste(getwd(),"/",output_folder,sep=""))=="FALSE") {
dir.create(paste(getwd(),"/",output_folder,"/",sep=""))
}
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
summary(mydata)
head(mydata)
#----------------
fit1 <- lm(MPG ~ WGT +CYL + ENG ,data=mydata)
summary(fit1) # show results
# Key outputs and statistics
coefficients(fit) # model coefficients
confint(fit, level=0.99) # 99% confidence for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
fit <- lm(MPG ~ WGT +CYL + ENG ,data=mydata)
summary(fit1) # show results
# Key outputs and statistics
coefficients(fit) # model coefficients
confint(fit, level=0.99) # 99% confidence for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
# use "capture.output" to save all the output from the "summary":
capture.output(summary(fit), file=(paste(output_folder,"/Modell3.txt", sep="")))
#use "write.table" to save the output tables:
write.table(anova(fit), file=(paste(output_folder,"/AnovaLinRegModelOutput.txt", sep="")))
quartz()# for Mac: quartz()
par(mfrow=c(2,2))
plot(fit)
savePlot(filename=paste(output_folder,"/LinReg", ".jpg", sep=""),type="jpg")  #for Mac: quartz.save(file=paste(output_folder,"/LinReg".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz.save(file=paste(output_folder,"/LinReg", ".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs")
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
summary(mydata)
summary(mydata)
#---------------------------------------------------------------
# Multiple Linear Regression:
#fit <- lm(y ~ x1 + x2 + x3, data=mydata)
#---------------------------------------------------------------
fit <- lm(wage ~ educ + exper, data=mydata)
summary(fit) # show results
summary(mydata)
input.file<-(paste(getwd(),"/wage.txt",sep=""))
input.file<-(paste(getwd(),"/wage.txt",sep=""))
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
if (sum(installed.packages()[,1]=="lmtest")==0){
install.packages("lmtest")
}
library(lmtest)
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs")
input.file<-(paste(getwd(),"/wage.txt",sep=""))
if (sum(installed.packages()[,1]=="lmtest")==0){
install.packages("lmtest")
}
library(lmtest)
#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.txt",sep=""))
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
input.file<-(paste(getwd(),"/wage.txt",sep=""))
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
summary(mydata)
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
input.file<-(paste(getwd(),"/wage.txt",sep=""))
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep=""))
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "\t" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
View(mydata)
summary(mydata)
fit <- lm(wage ~ educ + exper + metro, data=mydata)
summary(fit) # show results
mydata<-read.table(input.file,header = TRUE, sep = "." )
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep="."))
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "." )
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "" )
input.file<-(paste(getwd(),"/wage.csv",sep="."))
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep="."))
input.file<-(paste(getwd(),"/wage.csv",sep=","))
mydata<-read.table(input.file,header = TRUE, sep = "," )
#---------------------------------------------------------------
# MULTIPLE LINEAR REGRESSION
#---------------------------------------------------------------
# Main features:
#  Model fitting
#  Heteroscedasticity test (White test via the Breusch-Pagan test)
#  Key statistics (model fit, anova etc.)
#  Generalized OLS model
# Dataset used = "wage.txt":
#   wage= hourly wage;
#   educ= years of education;
#   exper= experience in years;
#   metro= a binary variable indicating if a person works in metropolitan area (1-yes, 0-no).
#---------------------------------------------------------------
if (sum(installed.packages()[,1]=="lmtest")==0){
install.packages("lmtest")
}
library(lmtest)
#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep=","))
mydata<-read.table(input.file,header = TRUE, sep = "," )
#---------------------------------------------------------------
# MULTIPLE LINEAR REGRESSION
#---------------------------------------------------------------
# Main features:
#  Model fitting
#  Heteroscedasticity test (White test via the Breusch-Pagan test)
#  Key statistics (model fit, anova etc.)
#  Generalized OLS model
# Dataset used = "wage.txt":
#   wage= hourly wage;
#   educ= years of education;
#   exper= experience in years;
#   metro= a binary variable indicating if a person works in metropolitan area (1-yes, 0-no).
#---------------------------------------------------------------
if (sum(installed.packages()[,1]=="lmtest")==0){
install.packages("lmtest")
}
library(lmtest)
#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep=","))
#create an output folder called "output_mlr"
if (file.exists(paste(getwd(),"/output_mlr",sep=""))=="FALSE") {
dir.create(paste(getwd(),"/output_mlr/",sep=""))
}
#---------------------------------------------------------------
# Read and view the data
#---------------------------------------------------------------
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "," )
# read the data
mydata<-read.table(input.file,header = TRUE, sep = "" )
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep=","))
# read the data
mydata<-read.csv(input.file,header = TRUE, sep = "" )
#specify the name and the location of the input file in relation to the working directory:
input.file<-(paste(getwd(),"/wage.csv",sep=","))
#create an output folder called "output_mlr"
if (file.exists(paste(getwd(),"/output_mlr",sep=""))=="FALSE") {
dir.create(paste(getwd(),"/output_mlr/",sep=""))
}
# read the data
mydata<-read.csv(input.file,header = TRUE, sep = "" )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
# read the data
mydata<-read.csv(input.file,header = TRUE, sep = "," )
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata<-na.omit(mydata)
# view the basic data statistics
summary(mydata)
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep="")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
View(mydata)
#---------------------------------------------------------------
# MULTIPLE LINEAR REGRESSION
#---------------------------------------------------------------
# Main features:
#  Model fitting
#  Heteroscedasticity test (White test via the Breusch-Pagan test)
#  Key statistics (model fit, anova etc.)
#  Generalized OLS model
# Dataset used = "wage.txt":
#   wage= hourly wage;
#   educ= years of education;
#   exper= experience in years;
#   metro= a binary variable indicating if a person works in metropolitan area (1-yes, 0-no).
#---------------------------------------------------------------
if (sum(installed.packages()[,1]=="lmtest")==0){
install.packages("lmtest")
}
library(lmtest)
#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep="")
#create an output folder called "output_mlr"
if (file.exists(paste(getwd(),"/output_mlr",sep=""))=="FALSE") {
dir.create(paste(getwd(),"/output_mlr/",sep=""))
}
# read the data
mydata <- read.csv(input.file, header=TRUE)
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata <- na.omit(mydata)
summary(mydata)
View(mydata)
library(lmtest)
#---------------------------------------------------------------
# SPECIFICATIONS
#---------------------------------------------------------------
#set the working directory for your project:
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
#set your EconID:
#EconID<-11
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=";")
#create an output folder called "output_mlr"
if (file.exists(paste(getwd(),"/output_mlr",sep=""))=="FALSE") {
dir.create(paste(getwd(),"/output_mlr/",sep=""))
}
#---------------------------------------------------------------
# Read and view the data
#---------------------------------------------------------------
# read the data
mydata <- read.csv(input.file, header=TRUE)
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata <- na.omit(mydata)
summary(mydata)
View(mydata)
#set the working directory for your project:
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
input.file <- paste(getwd(), "/wage.csv", sep=";")
mydata <- read.csv(input.file, header=TRUE)
#mydata<-mydata[c(1:(EconID-1),(EconID+1):(EconID+5),(EconID+7):nrow(mydata)),]
mydata <- na.omit(mydata)
summary(mydata)
# read the data
mydata <- read.csv(input.file, header=TRUE)
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep="")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=";")
#create an output folder called "output_mlr"
if (file.exists(paste(getwd(),"/output_mlr",sep=""))=="FALSE") {
dir.create(paste(getwd(),"/output_mlr/",sep=""))
}
View(mydata)
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep=".")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=";")
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep=".")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=";")
clear
clear
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep=".")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=";")
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep=".")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=";")
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep=",")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
# Remove any rows with missing values
mydata <- na.omit(mydata)
#specify the name and the location of the input file in relation to the working directory:
input.file <- paste(getwd(), "/wage.csv", sep=",")
# Set the working directory
setwd("/Users/riccardo/Desktop/Github/Python-Crashkurs/Data")
# Specify the input file path (correct without a comma separator)
input.file <- paste(getwd(), "/wage.csv", sep="")
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE)
View(mydata)
View(mydata)
# Read the data (no need for 'sep=""' since it's a CSV)
mydata <- read.csv(input.file, header=TRUE,sep=";")
View(mydata)
fit <- lm(wage ~ educ + exper + metro, data=mydata)
summary(fit) # show results
# Key outputs and statistics
coefficients(fit) # model coefficients
confint(fit, level=0.99) # 99% confidence for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
#----- fit for rural data only
mydata.rural=mydata[mydata$metro==1,] # Metro 1 or rural 0
fit.rural <- lm(wage ~ educ + exper , data=mydata.rural)
summary(fit.rural) # show results
#------ fit for metro data only
mydata.metro=mydata[mydata$metro==1,]
View(mydata.metro)
fit.metro <- lm(wage ~ educ + exper , data=mydata.metro)
summary(fit.metro) # show results
#---------------------------------------------------------------
bptestresult<-bptest(fit, ~ educ*exper +exper*metro+educ*metro+ I(educ^2) + I(exper^2), data = mydata)
capture.output(bptestresult, file=(paste("output_mlr/","Breusch-PaganTestresult.txt", sep="")))
# use "capute.output" to save all the output from the "summary":
capture.output(summary(fit), file=(paste("output_mlr/","LinRegModelOutput.txt", sep="")))
#use "write.table" to save the output tables:
write.table(anova(fit), file=(paste("output_mlr/","AnovaLinRegModelOutput.txt", sep="")))
#plots
# windows device figure (it will just be shortly shown and then closed and saved)
quartz()# for Mac: quartz()
par(mfrow=c(2,2))
plot(fit)
# savePlot(filename=paste("output_mlr/","LinReg", ".jpg", sep=""),type="jpg") #for Mac: quartz.save(file=paste(output.dir,"LinReg".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz.save(file=paste("output.dir","LinReg","jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
uartz.save(file=paste("output.dir","LinReg","jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
dev.off()
quartz()# for Mac: quartz()
par(mfrow=c(2,2))
plot(fit)
# savePlot(filename=paste("output_mlr/","LinReg", ".jpg", sep=""),type="jpg") #for Mac: quartz.save(file=paste(output.dir,"LinReg".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz.save(file=paste("output.dir","LinReg","jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz.save(file=paste("output.dir","LinReg","jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz()# for Mac: quartz(
plot(fit)
#plots
# windows device figure (it will just be shortly shown and then closed and saved)
quartz()# for Mac: quartz()
par(mfrow=c(2,2))
plot(fit)
# savePlot(filename=paste("output_mlr/","LinReg", ".jpg", sep=""),type="jpg") #for Mac: quartz.save(file=paste(output.dir,"LinReg".jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
quartz.save(file=paste("output.dir","LinReg","jpg", sep=""),type="jpg", device = dev.cur(), dpi = 100)
# plot within the R studio "plots" window
plot(fitted(fit),residuals(fit))
plot(mydata$wage,residuals(fit))
plot(fitted(fit),residuals(fit))
plot(mydata$wage,residuals(fit))
SERm<-summary(fit.metro)$sigma
SERr<-summary(fit.rural)$sigma
mydatametro<-mydata[mydata$metro==1,]/SERm
mydatametro<-cbind(rep(1/SERm,nrow(mydatametro)),mydatametro)
names(mydatametro)<-c("SER","wage","educ","exper","metro")
mydatarural<-mydata[mydata$metro==0,]/SERr
mydatarural<-cbind(rep(1/SERr,nrow(mydatarural)),mydatarural)
names(mydatarural)<-c("SER","wage","educ","exper","metro")
mydataGOLS<-rbind(mydatametro,mydatarural)
fitGOLS <- lm(wage ~ SER+educ + exper + metro -1, data=mydataGOLS)
summary(fitGOLS) # show results
#save GOLS results to a file:
capture.output(summary(fitGOLS), file=(paste("output_mlr/","GOLSModelOutput.txt", sep="")))
